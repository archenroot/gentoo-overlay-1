<SPConfig xmlns="urn:mace:shibboleth:2.0:native:sp:config"
	xmlns:conf="urn:mace:shibboleth:2.0:native:sp:config"
	xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
	xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"	
	xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata"
	clockSkew="180">

	<!--
		By default, in-memory StorageService, ReplayCache, ArtifactMap, and SessionCache are used. 
		See https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPShibbolethXML for more 
		information.
	-->

	<!-- 
		The UnixListener provides a remoting layer based on a Unix domain socket Only one listener 
		can be defined, to connect in-process modules to shibd. 
	-->
	<UnixListener address="/run/shibboleth/shibd.sock" />

	<!--
		The RequestMapper configures the component used by the SP to map incoming requests to the 
		set of configuration options that should be applied.

		Uncomment these lines if you're using FastCGI (e.g. with Lighttpd). Otherwise with mod_shib
		in Apache you can configure request mapping directly in Apache virtual host config. See
		/etc/apache2/modules.d/20_mod_shib.conf for example.
	--><!--
	<RequestMapper type="XML">
		<RequestMap applicationId="default">
			<Host name="localhost" authType="shibboleth" requireSession="true" />
		</RequestMap>
	</RequestMapper>
	-->

	<!-- 
		Provides for configuration of protocol behavior, session policy, error handling, and 
		attribute handling. All requests into a server using Shibboleth are mapped by the 
		RequestMapper, or web server commands, to the settings in the corresponding 
		ApplicationDefaults or ApplicationOverride element for processing.
	-->
	<ApplicationDefaults 
			id="default" 
			policyId="default"
			entityID="https://sp.example.org/shibboleth"
			REMOTE_USER="eppn persistent-id targeted-id">

		<!--
			Controls session lifetimes, address checks, cookie handling, and the protocol handlers.
			You MUST supply an effectively unique handlerURL value for each of your applications.
			The value defaults to /Shibboleth.sso, and should be a relative path, with the SP 
			computing a relative value based on the virtual host. Using handlerSSL="true", the 
			default, will force the protocol to be https. You should also add a cookieProps setting 
			of "; path=/; secure" in that case. Note that while we default checkAddress to "false", 
			this has a negative impact on the security of the SP. Stealing cookies/sessions is much 
			easier with this disabled.
		-->
		<Sessions handlerURL="/Shibboleth.sso"
				  handlerSSL="false"
				  lifetime="28800" 
				  timeout="3600" 
				  checkAddress="false" 
				  consistentAddress="true"
				  cookieProps="; path=/; HttpOnly"
				  relayState="ss:mem"
				  postTemplate="templates/postTemplate.html">

			<!--
				Configures SSO for a default IdP. To allow for >1 IdP, remove
				entityID property and adjust discoveryURL to point to discovery service.
				(Set discoveryProtocol to "WAYF" for legacy Shibboleth WAYF support.)
				You can also override entityID on /Login query string, or in RequestMap/htaccess.
			<SSO entityID="https://idp.example.org/shibboleth"
				 discoveryURL="https://ds.example.org/DS/WAYF"
				 discoveryProtocol="SAMLDS">
				SAML2 SAML1
			</SSO> -->

			<!-- 
				TestShib Two Identity Provider which you can use to test your
				Shibboleth SP. Go to https://www.testshib.org/metadata.html
				for instructions.
			-->
			<SSO entityID="https://idp.testshib.org/idp/shibboleth">
				SAML2 SAML1
			</SSO>

			<!-- SAML and local-only logout. -->
			<Logout>SAML2 Local</Logout>
			
			<!-- Extension service that generates "approximate" metadata based on SP configuration. -->
			<Handler type="MetadataGenerator" 
					 Location="/Metadata" 
					 signing="false"
					 acl="127.0.0.1" />

			<!-- Status reporting service. -->
			<Handler type="Status" 
					 Location="/Status"
					 acl="127.0.0.1" />

			<!-- Session diagnostic service. -->
			<Handler type="Session" 
					 Location="/Session" 
					 showAttributeValues="true"
					 acl="127.0.0.1" />

			<!-- JSON feed of discovery information. -->
			<Handler type="DiscoveryFeed" 
					 Location="/DiscoFeed"
					 cacheToDisk="true"
					 dir="/var/cache/shibboleth"
					 acl="" />
		</Sessions>

		<!--
			Allows overriding of error template information/filenames. You can
			also add attributes with values that can be plugged into the templates.
		-->
		<Errors supportContact="root@localhost"
				session="templates/sessionError.html"
				metadata="templates/metadataError.html"
				access="templates/accessError.html"
				ssl="templates/sslError.html"
				localLogout="templates/localLogout.html"
				globalLogout="templates/globalLogout.html"
				logoLocation="/shibboleth-sp/logo.jpg"
				styleSheet="/shibboleth-sp/main.css" />
		
		<!-- Example of remotely supplied batch of signed metadata.
		<MetadataProvider type="XML" uri="http://federation.org/federation-metadata.xml"
			  backingFilePath="federation-metadata.xml" reloadInterval="7200">
			<MetadataFilter type="RequireValidUntil" maxValidityInterval="2419200"/>
			<MetadataFilter type="Signature" certificate="fedsigner.pem"/>
		</MetadataProvider>
		-->

		<!-- Example of locally maintained metadata.
		<MetadataProvider type="XML" file="partner-metadata.xml"/>
		-->

		<!-- 
			 Metadata for the TestShib Two IdP which you can use to test your
			 Shibboleth SP. 
		-->
		<MetadataProvider 
				type="XML" 
				uri="http://www.testshib.org/metadata/testshib-providers.xml" 
				backingFilePath="/var/cache/shibboleth/testshib-two-idp-metadata.xml"
				reloadInterval="180000" />

		<!-- Map to extract attributes from SAML assertions. -->
		<AttributeExtractor 
				type="XML" 
				validate="true" 
				path="attribute-map.xml" />
		
		<!-- Use a SAML query if no attributes are supplied during SSO. -->
		<AttributeResolver 
				type="Query" 
				subjectMatch="true" />

		<!-- Default filtering policy for recognized attributes, lets other data pass. -->
		<AttributeFilter 
				type="XML"
				validate="true" 
				path="attribute-policy.xml" />

		<!-- Simple file-based resolver for using a single keypair. -->
		<CredentialResolver 
				type="File" 
				key="certs/sp-key.pem" 
				certificate="certs/sp-cert.pem" />

		<!--
			The default settings can be overridden by creating ApplicationOverride elements (see
			the https://spaces.internet2.edu/display/SHIB2/NativeSPApplicationOverride topic).
			Resource requests are mapped by web server commands, or the RequestMapper, to an
			applicationId setting.
		
			Example of a second application (for a second vhost) that has a different entityID.
			Resources on the vhost would map to an applicationId of "admin":

			<ApplicationOverride id="admin" entityID="https://admin.example.org/shibboleth"/>
		-->
	</ApplicationDefaults>
	

	<!-- Policies that determine how to process and authenticate runtime messages. -->
	<SecurityPolicyProvider 
			type="XML" 
			validate="true" 
			path="security-policy.xml" />

	<!-- Low-level configuration about protocols and bindings available for use. -->
	<ProtocolProvider 
			type="XML" 
			validate="true" 
			reloadChanges="false" 
			path="protocols.xml" />

</SPConfig>
